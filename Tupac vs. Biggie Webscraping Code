{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-24T17:00:24.327526Z",
     "start_time": "2019-05-24T17:00:23.473382Z"
    }
   },
   "outputs": [],
   "source": [
    "from bs4 import BeautifulSoup\n",
    "import requests\n",
    "import numpy\n",
    "import time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-24T17:00:24.344937Z",
     "start_time": "2019-05-24T17:00:24.340918Z"
    }
   },
   "outputs": [],
   "source": [
    "url = 'https://genius.com/albums/2pac'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-24T17:00:24.919996Z",
     "start_time": "2019-05-24T17:00:24.909355Z"
    }
   },
   "outputs": [],
   "source": [
    "def get_songs_album(album_href):\n",
    "    song_links = []\n",
    "    response = requests.get(url+album_href)\n",
    "    while response.status_code !=200:\n",
    "        print(response.status_code)\n",
    "        time.sleep(1)\n",
    "        response = requests.get(url+album_href)\n",
    "    html = response.text\n",
    "    soup = BeautifulSoup(html, \"lxml\")\n",
    "    sample = soup.find_all('div', {'class':'chart_row-content'})\n",
    "    for i in sample:\n",
    "        link = i.find('a', {'class':\"u-display_block\"}).get('href')\n",
    "        song_links.append(link)\n",
    "    year = soup.find('div', {'class': \"metadata_unit\"}).text[-4:]\n",
    "    album_name = soup.find('h1', {'class': 'header_with_cover_art-primary_info-title header_with_cover_art-primary_info-title--white'}).text\n",
    "    return {'song_links': song_links, 'year': year, 'album':album_name}\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-24T17:00:26.990531Z",
     "start_time": "2019-05-24T17:00:25.817774Z"
    }
   },
   "outputs": [],
   "source": [
    "test = '/2pacalypse-now'\n",
    "all_songs = get_songs_album(test)\n",
    "# print(all_songs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-24T17:00:27.999268Z",
     "start_time": "2019-05-24T17:00:27.985523Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['https://genius.com/2pac-young-black-male-lyrics',\n",
       " 'https://genius.com/2pac-trapped-lyrics',\n",
       " 'https://genius.com/2pac-souljas-story-lyrics',\n",
       " 'https://genius.com/2pac-i-dont-give-a-fuck-lyrics',\n",
       " 'https://genius.com/2pac-violent-lyrics',\n",
       " 'https://genius.com/2pac-words-of-wisdom-lyrics',\n",
       " 'https://genius.com/2pac-something-wicked-lyrics',\n",
       " 'https://genius.com/2pac-crooked-ass-nigga-lyrics',\n",
       " 'https://genius.com/2pac-if-my-homie-calls-lyrics',\n",
       " 'https://genius.com/2pac-brendas-got-a-baby-lyrics',\n",
       " 'https://genius.com/2pac-tha-lunatic-lyrics',\n",
       " 'https://genius.com/2pac-rebel-of-the-underground-lyrics',\n",
       " 'https://genius.com/2pac-part-time-mutha-lyrics']"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "all_songs['song_links']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-24T17:00:36.602354Z",
     "start_time": "2019-05-24T17:00:36.593157Z"
    }
   },
   "outputs": [],
   "source": [
    "def getting_lyrics(link, year, album, artist):\n",
    "    response = requests.get(link)\n",
    "    while response.status_code !=200:\n",
    "        print(response.status_code)\n",
    "        time.sleep(1)\n",
    "        response = requests.get(url+album_href)\n",
    "    html = response.text\n",
    "    soup = BeautifulSoup(html, \"lxml\")\n",
    "    lyrics = soup.find('p').text\n",
    "    song_title = soup.find('h1').text\n",
    "    return {\n",
    "        'album': album,\n",
    "        'year': year,\n",
    "        'lyrics': lyrics,\n",
    "        'track': song_title,\n",
    "        'artist': artist\n",
    "    }\n",
    "    \n",
    "    \n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2019-05-24T17:01:14.901956Z",
     "start_time": "2019-05-24T17:01:13.927254Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'album': '2Pacalypse Now',\n",
       " 'year': '1991',\n",
       " 'lyrics': \"[Intro: 2Pac, Ed O.G. & Ice Cube]\\nHard like an erection\\nYoung black male\\nHard like an erection\\nAin't shit to fool with\\nHard like an erection\\nYoung black male\\nHard like an erection\\nAin't shit to fool with\\nYes, niggas! Yes, niggas! Yes, niggas!\\nHard like an erection\\nYoung black male\\nHard like an erection\\nAin't shit to fool with\\nHard like an erection\\nYoung black male\\nHard like an erection\\nGo nigga, go!\\n\\n[Verse: 2Pac]\\nYoung black male\\nI try to effect by kicking the facts\\nAnd stacking much mail\\nI'm packing a gat 'cause cops wanna jack\\nAnd fuck going to jail\\n'Cause I ain't a crook, despite how I look\\nI don't sell yayo\\nThey judging a brother like covers on books\\nSo follow me into a flow\\nI'm sure you know, which way to go\\nI'm hitting 'em out of the doors\\nSo slip on the slope, let's skip on the flow\\nI'm fucking the sluts and hoes\\nThe bigger the butts, the tighter the clothes\\nThe gimminy jimminy grows\\nThen whaddaya know, it's off with some clothes\\nRowd when the crowd says ho\\nThat let's me know, they know I can flow\\nLove when they come to my shows\\nI get up and go with skins before\\nWhen I'm collecting my dough\\nI never respect, the one that I back\\nThe quicker the nigga can rap\\nThe bigger the check\\nNow watch how they sweat\\nWhat kind of style is that?\\nThe style of a mack, and ready to jack\\nI rendered up piles of black\\nThe wacker the pack, the fatter the smack\\nI hate it when real niggas bust\\nThey hate when I cuss, they threaten to bust\\nI had enough of the fuss\\nI bust what I bust and cuss when I must\\nThey gave me a charge for sales\\nFor selling the tales of young black males\\n\\n[Outro]\\nYes, nigga, N-I-G-G-A, niggas\\nAy, nigga, you can't handle that shit!\\nPass that man!\\nHit that shit, that's the shit!\\nIt smells like skunk, skunk smells like that nigga momma\\nWe ain't nothin' but some low down dirty niggas\\nKeep it real, nigga! Fuck you, nigga!\\nYou ain't giving me near a dime on this real motherfucker\\nFuck St. Ides, it's an Old E thing, baby\\nStrictly some of that Hennessy\\nCan I drink with you, fellas? Can I get in on it?\\nFuck you, Capo, you ain't in, baby\\nI tell you what! You guys are not gonna be talking all that shit, when I come back, OK?\\nWe gonna see who the big mouth when I come back\\nYoung black male!\",\n",
       " 'track': 'Young Black Male',\n",
       " 'artist': '2pac'}"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "getting_lyrics(all_songs['song_links'][0], all_songs['year'], all_songs['album'], \"2pac\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "# list_of_hrefs = [ test2, test3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'song_links': ['https://genius.com/2pac-young-black-male-lyrics',\n",
       "  'https://genius.com/2pac-trapped-lyrics',\n",
       "  'https://genius.com/2pac-souljas-story-lyrics',\n",
       "  'https://genius.com/2pac-i-dont-give-a-fuck-lyrics',\n",
       "  'https://genius.com/2pac-violent-lyrics',\n",
       "  'https://genius.com/2pac-words-of-wisdom-lyrics',\n",
       "  'https://genius.com/2pac-something-wicked-lyrics',\n",
       "  'https://genius.com/2pac-crooked-ass-nigga-lyrics',\n",
       "  'https://genius.com/2pac-if-my-homie-calls-lyrics',\n",
       "  'https://genius.com/2pac-brendas-got-a-baby-lyrics',\n",
       "  'https://genius.com/2pac-tha-lunatic-lyrics',\n",
       "  'https://genius.com/2pac-rebel-of-the-underground-lyrics',\n",
       "  'https://genius.com/2pac-part-time-mutha-lyrics'],\n",
       " 'year': '1991',\n",
       " 'album': '2Pacalypse Now'}"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "get_songs_album(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_all_songs(list_album_hrefs, artist):\n",
    "    output = []\n",
    "    for i in list_album_hrefs:\n",
    "        all_songs = get_songs_album(i)\n",
    "        for j in all_songs['song_links']:\n",
    "            output.append(getting_lyrics(j, all_songs['year'], all_songs['album'], artist))\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "list_of_rows = get_all_songs([test], '2pac')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['album', 'year', 'lyrics', 'track', 'artist'])\n"
     ]
    }
   ],
   "source": [
    "import csv \n",
    "\n",
    "keys = list(list_of_rows[0].keys())\n",
    "print(list_of_rows[0].keys())\n",
    "with open('2pac_test.csv', 'w') as f:\n",
    "    \n",
    "    dict_writer = csv.DictWriter(f, fieldnames = keys)\n",
    "    dict_writer.writeheader()\n",
    "    dict_writer.writerows(list_of_rows)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Getting each tupac album\n",
    "\n",
    "album2 = get_all_songs(['/Strictly-4-my-n-i-g-g-a-z'], '2pac')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys(['album', 'year', 'lyrics', 'track', 'artist'])\n"
     ]
    }
   ],
   "source": [
    "keys = list(album2[0].keys())\n",
    "print(album2[0].keys())\n",
    "with open('2pac_data_2.csv', 'w') as f:\n",
    "    \n",
    "    dict_writer = csv.DictWriter(f, fieldnames = keys)\n",
    "    dict_writer.writeheader()\n",
    "    dict_writer.writerows(list_of_rows)\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
